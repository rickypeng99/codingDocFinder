Serialization and Deserialization in Java




Serialization


Serializable Interface


Example of Serialization


Deserialization


Example of Deserialization


Serialization with Inheritance


Externalizable interface


Serialization and static data member




Serialization in Java
 is a mechanism of 
writing the state of an object into a byte stream
.
It is mainly used in Hibernate, RMI, JPA, EJB and JMS technologies.
The reverse operation of serialization is called 
deserialization
. 
Advantages of Java Serialization
It is mainly used to travel object's state on the network (which is known as marshaling).
java.io.Serializable interface
Serializable is a marker interface (has no data member and method). It is used to "mark" Java classes so that objects of these classes may get the certain capability. The Cloneable and Remote are also marker interfaces.
 It must be implemented by the class whose object you want to persist. 
The String class and all the wrapper classes implement the 
java.io.Serializable
 interface by default.
Let's see the example given below:

import java.io.Serializable;
public class Student implements Serializable{
 int id;
 String name;
 public Student(int id, String name) {
  this.id = id;
  this.name = name;
 }
}

In the above example, Student class implements Serializable interface. Now its objects can be converted into stream.

(adsbygoogle = window.adsbygoogle || []).push({});

ObjectOutputStream class
The ObjectOutputStream class is used to write primitive data types, and Java objects to an OutputStream. Only objects that support the java.io.Serializable interface can be written to streams.
Constructor


1) public ObjectOutputStream(OutputStream out) throws IOException {}
creates an ObjectOutputStream that writes to the specified OutputStream.


Important Methods


Method
Description


1) public final void writeObject(Object obj) throws IOException {}
writes the specified object to the ObjectOutputStream. 


2) public void flush() throws IOException {}
flushes the current output stream. 


3) public void close() throws IOException {}
closes the current output stream. 


Example of Java Serialization
In this example, we are going to serialize the object of Student class. The writeObject() method of ObjectOutputStream class provides the functionality to serialize the object. We are saving the state of the object in the file named f.txt.

import java.io.*;
class Persist{
 public static void main(String args[])throws Exception{
  Student s1 =new Student(211,"ravi");

  FileOutputStream fout=new FileOutputStream("f.txt");
  ObjectOutputStream out=new ObjectOutputStream(fout);

  out.writeObject(s1);
  out.flush();
  System.out.println("success");
 }
}


success



download this example of serialization


Deserialization in java

Deserialization is the process of reconstructing the object from the serialized state.It is the reverse operation of serialization.
ObjectInputStream class
An ObjectInputStream deserializes objects and primitive data written using an ObjectOutputStream.
Constructor


1) public ObjectInputStream(InputStream in) throws IOException {}
creates an ObjectInputStream that reads from the specified InputStream.


Important Methods


Method
Description


1) public final Object readObject() throws IOException, ClassNotFoundException{}
reads an object from the input stream. 


2) public void close() throws IOException {}
closes ObjectInputStream.


Example of Java Deserialization

import java.io.*;
class Depersist{
 public static void main(String args[])throws Exception{
  
  ObjectInputStream in=new ObjectInputStream(new FileInputStream("f.txt"));
  Student s=(Student)in.readObject();
  System.out.println(s.id+" "+s.name);

  in.close();
 }
}


211 ravi



download this example of deserialization


Java Serialization with Inheritance (IS-A Relationship)
If a class implements serializable then all its sub classes will also be serializable. Let's see the example given below:

import java.io.Serializable;
class Person implements Serializable{
 int id;
 String name;
 Person(int id, String name) {
  this.id = id;
  this.name = name;
 }
}



class Student extends Person{
 String course;
 int fee;
 public Student(int id, String name, String course, int fee) {
  super(id,name);
  this.course=course;
  this.fee=fee;
 }
}

Now you can serialize the Student class object that extends the Person class which is Serializable. Parent class properties are inherited to subclasses so if parent class is Serializable, subclass would also be.
Java Serialization with Aggregation (HAS-A Relationship)
If a class has a reference to another class, all the references must be Serializable otherwise serialization process will not be performed. In such case, 
NotSerializableException
 is thrown at runtime.

class Address{
 String addressLine,city,state;
 public Address(String addressLine, String city, String state) {
  this.addressLine=addressLine;
  this.city=city;
  this.state=state;
 }
}


import java.io.Serializable;
public class Student implements Serializable{
 int id;
 String name;
 Address address;//HAS-A
 public Student(int id, String name) {
  this.id = id;
  this.name = name;
 }
}

Since Address is not Serializable, you can not serialize the instance of Student class.
Note: All the objects within an object must be Serializable.
Java Serialization with the static data member
If there is any static data member in a class, it will not be serialized because static is the part of class not object.

class Employee implements Serializable{
 int id;
 String name;
 static String company="SSS IT Pvt Ltd";//it won't be serialized
 public Student(int id, String name) {
  this.id = id;
  this.name = name;
 }
}

Java Serialization with array or collection
Rule: In case of array or collection, all the objects of array or collection must be serializable. If any object is not serialiizable, serialization will be failed.
Externalizable in java

The Externalizable interface provides the facility of writing the state of an object into a byte stream in compress format. It is not a marker interface.

The Externalizable interface provides two methods:


public void writeExternal(ObjectOutput out) throws IOException


public void readExternal(ObjectInput in) throws IOException


Java Transient Keyword
If you don't want to serialize any data member of a class, you can mark it as transient.
Visit next page for more details.