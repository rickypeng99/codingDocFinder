Java OOPs Concepts




Object-Oriented Programming


Advantage of OOPs over Procedure-oriented programming language


Difference between Object-oriented and Object-based programming language.




In this page, we will learn about the basics of OOPs. Object-Oriented Programming is a paradigm that provides many concepts such as 
inheritance
, 
data binding
, 
polymorphism
, etc.
Simula
 is considered the first object-oriented programming language. The programming paradigm where everything is represented as an object is known as a truly object-oriented programming language.
Smalltalk
 is considered the first truly object-oriented programming language.
The popular object-oriented languages are 
Java
, 
C#
, 
PHP
, 
Python
, 
C++
, etc.
The main aim of object-oriented programming is to implement real-world entities for example object, classes, abstraction, inheritance, polymorphism, etc.
OOPs (Object-Oriented Programming System)
Object
 means a real-world entity such as a pen, chair, table, computer, watch, etc.  
Object-Oriented Programming
 is a methodology or paradigm to design a program using classes and objects. It simplifies the software development and maintenance by providing some concepts:


Object


Class


Inheritance


Polymorphism


Abstraction


Encapsulation



(adsbygoogle = window.adsbygoogle || []).push({});

Object
Any entity that has state and behavior is known as an object. For example a chair, pen, table, keyboard, bike, etc. It can be physical or logical.
An Object can be defined as an instance of a class. An object contains an address and takes up some space in memory. Objects can communicate without knowing the details of each other's data or code. The only necessary thing is the type of message accepted and the type of response returned by the objects.
Example:
 A dog is an object because it has states like color, name, breed, etc. as well as behaviors like wagging the tail, barking, eating, etc.

Class
Collection of objects
 is called class. It is a logical entity.
A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space.
Inheritance
When one object acquires all the properties and behaviors of a parent object
, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.
Polymorphism
If 
one task is performed by different ways
, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc. 
In Java, we use method overloading and method overriding to achieve polymorphism.
Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.
Abstraction
Hiding internal details and showing functionality
 is known as abstraction. For example phone call, we don't know the internal processing. 
In Java, we use abstract class and interface to achieve abstraction.
Encapsulation
Binding (or wrapping) code and data together into a single unit are known as encapsulation
. For example capsule, it is wrapped with different medicines.
 A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here.
Advantage of OOPs over Procedure-oriented programming language

1) OOPs makes development and maintenance easier whereas in a procedure-oriented programming language it is not easy to manage if code grows as project size increases.

2) OOPs provides data hiding whereas in a procedure-oriented programming language a global data can be accessed from anywhere.

Figure: Data Representation in Procedure-Oriented Programming
Figure: Data Representation in Object-Oriented Programming
3) OOPs provides the ability to simulate real-world event much more effectively. We can provide the solution of real word problem if we are using the Object-Oriented Programming language.
What is the difference between an object-oriented programming language and object-based programming language?
Object-based programming language follows all the features of OOPs except Inheritance. JavaScript and VBScript are examples of object-based programming languages.



Do You Know? 






Can we overload the main method?


A Java Constructor returns a value but, what?


Can we create a program without main method?


What are the six ways to use this keyword?


Why is multiple inheritance not supported in Java?


Why use aggregation?


Can we override the static method?


What is covariant return type?


What are the three usages of Java super keyword?


Why use instance initializer block?


What is the usage of a blank final variable?


What is a marker or tagged interface?


What is runtime polymorphism or dynamic method dispatch?


What is the difference between static and dynamic binding?


How downcasting is possible in Java?


What is the purpose of a private constructor?


What is object cloning?










What will we learn in OOPs Concepts? 






Advantage of OOPs


Naming Convention


Object and class


Method overloading


Constructor


static keyword


this keyword with six usage


Inheritance


Aggregation


Method Overriding


Covariant Return Type


super keyword


Instance Initializer block


final keyword


Abstract class


Interface


Runtime Polymorphism


Static and Dynamic Binding


Downcasting with instanceof operator


Package


Access Modifiers


Encapsulation


Object Cloning






