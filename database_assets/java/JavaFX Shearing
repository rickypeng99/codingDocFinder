JavaFX Shearing
Shearing is a kind of transformation which changes the slope of the object with respect to any of the axis. There are two Shear transformations that are X-shear and Y-shear. The X-shear transformation changes the X-coordinate values while the Y-shear changes the Y-coordinate values.
In both kind of shearing, only one coordinate changes the value while the other remains same. The following image shows the object after applying the X-shear transformation to it. The y-coordinate of the rectangle remain unchanged while the X-coordinate shifts by some factor.
In JavaFX, the class javafx.scene.transform.Shear represents the Shear Transformation.
Properties
The properties of the class along with the setter methods are described in the following table. 



	
Property

	
Description

	
Setter Methods





	
pivotX

	
It is a double type property. It represents the X coordinate of the shear pivot point. 

	
setPivotX(double value)





	
pivotY

	
It is a double type property. It represents the Y coordinate of the shear pivot point. 

	
setPivotY(double value)





	
x

	
It is a double type property. It represents the multiplier by which the coordinates deviate in the positive X direction as the factor of their Y coordinate. 

	
setX(double value)





	
y

	
It is a double type property. It represents the multiplier by which the coordinates deviate in the positive Y direction as the factor of their X coordinate. 

	
setY(double value)




Constructors
The class contains three constructors 


public Shear() :
 creates a new instance of Shear with the default parameters.
 

public Shear(double x, double y) :
 creates a new instance with the specified offset coordinates. The pivot coordinates are set to (0,0).
  

public Shear(double x, double y, double pivotX, double pivotY) :
 creates a new instance with the specified offset coordinates and pivot coordinates.


Example:
The following example illustrates the implementation of Shearing Transformation. Here, we have created three rectangles which are filled with the blue, dark-grey and pink color respectively. The dark-grey rectangle is the original one while the blue rectangle is X-sheared and the pink rectangle is Y-sheared. 

package application;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.transform.Shear;
import javafx.stage.Stage;
public class ShearExample extends Application{

	@Override
	public void start(Stage primaryStage) throws Exception {
		// TODO Auto-generated method stub
		// creating Rectangles 
		Rectangle rect1 = new Rectangle(60,100,150,200);
		Rectangle rect2 = new Rectangle(350,100,150,200);
		Rectangle rect3 = new Rectangle(640,100,150,200);
		
		//creating Text node just for the identification	
		Text text1 = new Text("After X shear");
		Text text2 = new Text("Original ");
		Text text3 = new Text("After Y shear");
		
		//setting the positions and the fonts for the text nodes
		text1.setX(70);
		text1.setY(370);
		text2.setX(380);
		text2.setY(370);
		text3.setX(640);
		text3.setY(370);
text1.setFont(Font.font("calibri",FontWeight.BOLD,FontPosture.ITALIC,20));
text2.setFont(Font.font("calibri",FontWeight.BOLD,FontPosture.ITALIC,20));
text3.setFont(Font.font("calibri",FontWeight.BOLD,FontPosture.ITALIC,20));

//setting the color and stroke for the rectangles 
		rect1.setFill(Color.BLUE);
		rect1.setStroke(Color.BLACK);
		rect2.setFill(Color.DARKGRAY);
		rect2.setStroke(Color.BLACK);
		rect3.setFill(Color.PINK);
		rect3.setStroke(Color.BLACK);
		
		//creating the shear transformation 
		Shear shearX = new Shear();
		
		// setting properties for the shear, the Y coordinate // needs to set to (0,0) for the X-shear transformation 
		shearX.setPivotX(200); 
	shearX.setPivotY(250);
	shearX.setX(0.3); 
	shearX.setY(0.0);
		// applying the shear to first rectangle. 	
		rect1.getTransforms().add(shearX);
	
		//creating the shear for third rectangle
		Shear shearY = new Shear();
		
		//setting the properties for shear, X coordinate needs // to be set to (0,0) in order to implement Y-shear
		shearY.setPivotX(600);
		shearY.setPivotY(80);
		shearY.setX(0.0);
		shearY.setY(0.2);
		
		rect3.getTransforms().add(shearY);
		Group root = new Group();
		root.getChildren().addAll(rect1,rect2,rect3,text1,text2,text3);
		Scene scene = new Scene(root,880,420);
		primaryStage.setScene(scene);
		primaryStage.setTitle("Shear Example");
		primaryStage.show();
	}
	public static void main(String[] args) {
		launch(args);
	}

}
