Java LocalDate class
Java LocalDate class is an immutable class that represents Date with a default format of yyyy-MM-dd. It inherits Object class and implements the ChronoLocalDate interface
Java LocalDate class declaration
Let's see the declaration of java.time.LocalDate class.

public final class LocalDate extends Object 
implements Temporal, TemporalAdjuster, ChronoLocalDate, Serializable

Methods of Java LocalDate

    

      
Method

      
Description

    

    

      
LocalDateTime atTime(int hour, int minute)

      
It is used to combine this date with a time to create a LocalDateTime.

    

    

      
int compareTo(ChronoLocalDate other)

      
It is used to compares this date to another date.

    

    

      
boolean equals(Object obj)

      
It is used to check if this date is equal to another date.

    

     

      
String format(DateTimeFormatter formatter)

      
It is used to format this date using the specified formatter.

    

     

      
int get(TemporalField field)

      
It is used to get the value of the specified field from this date as an int.

    

     

      
boolean isLeapYear()

      
It is used to check if the year is a leap year, according to the ISO proleptic calendar system rules.

    

     

      
LocalDate minusDays(long daysToSubtract)

      
It is used to return a copy of this LocalDate with the specified number of days subtracted.

    

     

      
LocalDate minusMonths(long monthsToSubtract)

      
It is used to return a copy of this LocalDate with the specified number of months subtracted.

    

    

      
static LocalDate now()

      
It is used to obtain the current date from the system clock in the default time-zone.

    

    

      
LocalDate plusDays(long daysToAdd)

      
It is used to return a copy of this LocalDate with the specified number of days added.

    

    

      
LocalDate	plusMonths(long monthsToAdd)

      
It is used to return a copy of this LocalDate with the specified number of months added.

    



(adsbygoogle = window.adsbygoogle || []).push({});

Java LocalDate Example

import java.time.LocalDate;
public class LocalDateExample1 {
  public static void main(String[] args) {
    LocalDate date = LocalDate.now();
    LocalDate yesterday = date.minusDays(1);
    LocalDate tomorrow = yesterday.plusDays(2);
    System.out.println("Today date: "+date);
    System.out.println("Yesterday date: "+yesterday);
    System.out.println("Tommorow date: "+tomorrow);
  }
}

Test it Now
Output:

Today date: 2017-01-13
Yesterday date: 2017-01-12
Tommorow date: 2017-01-14

Java LocalDate Example: isLeapYear()

import java.time.LocalDate;
public class LocalDateExample2 {
  public static void main(String[] args) {
    LocalDate date1 = LocalDate.of(2017, 1, 13);
    System.out.println(date1.isLeapYear());
    LocalDate date2 = LocalDate.of(2016, 9, 23);
    System.out.println(date2.isLeapYear());
  }
}

Test it Now
Output:

false
true

Java LocalDate Example: atTime()

import java.time.*;
public class LocalDateExample3 {
  public static void main(String[] args) {
    LocalDate date = LocalDate.of(2017, 1, 13);
    LocalDateTime datetime = date.atTime(1,50,9);    
    System.out.println(datetime); 
  }
}

Test it Now
Output:

2017-01-13T01:50:09
