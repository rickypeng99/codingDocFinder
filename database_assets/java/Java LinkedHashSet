Java LinkedHashSet class
Java LinkedHashSet class is a Hashtable and Linked list implementation of the set interface. It inherits HashSet class and implements Set interface.
The important points about Java LinkedHashSet class are:


Java LinkedHashSet class contains unique elements only like HashSet.


Java LinkedHashSet class provides all optional set operation and permits null elements.


Java LinkedHashSet class is non synchronized.


Java LinkedHashSet class maintains insertion order.


Hierarchy of LinkedHashSet class
The LinkedHashSet class extends HashSet class which implements Set interface. The Set interface inherits Collection and Iterable interfaces in hierarchical order.

(adsbygoogle = window.adsbygoogle || []).push({});

LinkedHashSet class declaration
Let's see the declaration for java.util.LinkedHashSet class.

public class LinkedHashSet
 extends HashSet
 implements Set
, Cloneable, Serializable

Constructors of Java LinkedHashSet class

     

         
Constructor

		 
Description

     

     

         
HashSet()

         
It is used to construct a default HashSet.

     

     

         
HashSet(Collection c)

         
It is used to initialize the hash set by using the elements of the collection c.

     

      

	          
LinkedHashSet(int capacity)

	          
It is used initialize the capacity of the linked hash set to the given integer value capacity.

     

      

	          
LinkedHashSet(int capacity, float fillRatio)

	          
It is used to initialize both the capacity and the fill ratio (also called load capacity) of the hash set from its argument.

     


Java LinkedHashSet Example
Let's see a simple example of Java LinkedHashSet class. Here you can notice that the elements iterate in insertion order.

import java.util.*;
class LinkedHashSet1{
 public static void main(String args[]){
 //Creating HashSet and adding elements
	    LinkedHashSet
 set=new LinkedHashSet();
			   set.add("One");  
			   set.add("Two");  
			   set.add("Three"); 
			   set.add("Four");
			   set.add("Five");
			   Iterator
 i=set.iterator();
			   while(i.hasNext())
			   {
			   System.out.println(i.next());
			   }
 }
}


One
Two
Three
Four
Five


Java LinkedHashSet example ignoring duplicate Elements

import java.util.*;
class LinkedHashSet2{
 public static void main(String args[]){
  LinkedHashSet
 al=new LinkedHashSet
();
  al.add("Ravi");
  al.add("Vijay");
  al.add("Ravi");
  al.add("Ajay");
  Iterator
 itr=al.iterator();
  while(itr.hasNext()){
   System.out.println(itr.next());
  }
 }
}


       Ravi
       Vijay
       Ajay

Java LinkedHashSet Example: Book

import java.util.*;
class Book {
int id;
String name,author,publisher;
int quantity;
public Book(int id, String name, String author, String publisher, int quantity) {
	this.id = id;
	this.name = name;
	this.author = author;
	this.publisher = publisher;
	this.quantity = quantity;
}
}
public class LinkedHashSetExample {
public static void main(String[] args) {
	LinkedHashSet
 hs=new LinkedHashSet
();
	//Creating Books
	Book b1=new Book(101,"Let us C","Yashwant Kanetkar","BPB",8);
	Book b2=new Book(102,"Data Communications & Networking","Forouzan","Mc Graw Hill",4);
	Book b3=new Book(103,"Operating System","Galvin","Wiley",6);
	//Adding Books to hash table
	hs.add(b1);
	hs.add(b2);
	hs.add(b3);
	//Traversing hash table
	for(Book b:hs){
	System.out.println(b.id+" "+b.name+" "+b.author+" "+b.publisher+" "+b.quantity);
	}
}
}

Output:

101 Let us C Yashwant Kanetkar BPB 8
102 Data Communications & Networking Forouzan Mc Graw Hill 4
103 Operating System Galvin Wiley 6
