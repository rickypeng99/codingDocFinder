Java Enum
Enum in java
 is a data type that contains fixed set of constants.
It can be used for days of the week (SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY and SATURDAY) , directions (NORTH, SOUTH, EAST and WEST) etc. The java enum constants are static and final implicitly. It is available from JDK 1.5.
Java Enums can be thought of as classes that have fixed set of constants.
Points to remember for Java Enum


enum improves type safety


enum can be easily used in switch


enum can be traversed


enum can have fields, constructors and methods


enum may implement many interfaces but cannot extend any class because it internally extends Enum class


Simple Example of Java Enum

class EnumExample1{
public enum Season { WINTER, SPRING, SUMMER, FALL }

public static void main(String[] args) {
for (Season s : Season.values())
System.out.println(s);

}}

Test it Now

Output:WINTER
       SPRING
       SUMMER
       FALL



download this enum example


What is the purpose of values() method in enum?
The java compiler internally adds the values() method when it creates an enum. The values() method returns an array containing all the values of the enum.
Internal code generated by the compiler for the above example of enum type
The java compiler internally creates a static and final class that extends the Enum class as shown in the below example:


public static final class EnumExample1$Season extends Enum
{
  private EnumExample1$Season(String s, int i)
    {
        super(s, i);
    }

    public static EnumExample1$Season[] values()
    {
        return (EnumExample1$Season[])$VALUES.clone();
    }

    public static EnumExample1$Season valueOf(String s)
    {
        return (EnumExample1$Season)Enum.valueOf(EnumExample1$Season, s);
    }

    public static final EnumExample1$Season WINTER;
    public static final EnumExample1$Season SPRING;
    public static final EnumExample1$Season SUMMER;
    public static final EnumExample1$Season FALL;
    private static final EnumExample1$Season $VALUES[];

    static 
    {
        WINTER = new EnumExample1$Season("WINTER", 0);
        SPRING = new EnumExample1$Season("SPRING", 1);
        SUMMER = new EnumExample1$Season("SUMMER", 2);
        FALL = new EnumExample1$Season("FALL", 3);
        $VALUES = (new EnumExample1$Season[] {
            WINTER, SPRING, SUMMER, FALL
        });
    }

}

Defining Java enum
The enum can be defined within or outside the class because it is similar to a class.
Java enum example: defined outside class

enum Season { WINTER, SPRING, SUMMER, FALL }
class EnumExample2{
public static void main(String[] args) {
Season s=Season.WINTER;
System.out.println(s);
}} 

Test it Now

Output:WINTER

Java enum example: defined inside class

class EnumExample3{
enum Season { WINTER, SPRING, SUMMER, FALL; }//semicolon(;) is optional here
public static void main(String[] args) {
Season s=Season.WINTER;//enum type is required to access WINTER
System.out.println(s);
}}

Test it Now

Output:WINTER

Initializing specific values to the enum constants
The enum constants have initial value that starts from 0, 1, 2, 3 and so on. But we can initialize the specific value to the enum constants by defining fields and constructors. As specified earlier, Enum can have fields, constructors and methods.
Example of specifying initial value to the enum constants


class EnumExample4{
enum Season{ 
WINTER(5), SPRING(10), SUMMER(15), FALL(20); 

private int value;
private Season(int value){
this.value=value;
}
}
public static void main(String args[]){
for (Season s : Season.values())
System.out.println(s+" "+s.value);

}}
    

Test it Now


download this enum example



Output:WINTER 5
       SPRING 10
       SUMMER 15
       FALL 20

Constructor of enum type is private. If you don't declare private compiler internally creates private constructor.

enum Season{
WINTER(10),SUMMER(20);
private int value;
Season(int value){
this.value=value;
}
}    

Internal code generated by the compiler for the above example of enum type

final class Season extends Enum
{
    public static Season[] values()
    {
        return (Season[])$VALUES.clone();
    }
    public static Season valueOf(String s)
    {
        return (Season)Enum.valueOf(Season, s);
    }
    private Season(String s, int i, int j)
    {
        super(s, i);
        value = j;
    }
    public static final Season WINTER;
    public static final Season SUMMER;
    private int value;
    private static final Season $VALUES[];
    static 
    {
        WINTER = new Season("WINTER", 0, 10);
        SUMMER = new Season("SUMMER", 1, 20);
        $VALUES = (new Season[] {
            WINTER, SUMMER
        });
    }
}

Can we create the instance of enum by new keyword?


No, because it contains private constructors only.


Can we have abstract method in enum?
Yes, ofcourse! we can have abstract methods and can provide the implementation of these methods.
Java enum in switch statement
We can apply enum on switch statement as in the given example:
Example of applying enum on switch statement


class EnumExample5{
enum Day{ SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY}
public static void main(String args[]){
Day day=Day.MONDAY;

switch(day){
case SUNDAY: 
 System.out.println("sunday");
 break;
case MONDAY: 
 System.out.println("monday");
 break;
default:
System.out.println("other day");
}
}}

Test it Now


download this enum example



Output:monday
