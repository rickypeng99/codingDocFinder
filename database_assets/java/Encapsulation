Encapsulation in Java
Encapsulation in Java
 is a 
process of wrapping code and data together into a single unit
, for example, a capsule which is mixed of several medicines.
We can create a fully encapsulated class in Java by making all the data members of the class private. Now we can use setter and getter methods to set and get the data in it.
The 
Java Bean
 class is the example of a fully encapsulated class.
Advantage of Encapsulation in Java
By providing only a setter or getter method, you can make the class 
read-only or write-only
. In other words, you can skip the getter or setter methods.
It provides you the 
control over the data
. Suppose you want to set the value of id which should be greater than 100 only, you can write the logic inside the setter method. You can write the logic not to store the negative numbers in the setter methods.
It is a way to achieve 
data hiding
 in Java because other class will not be able to access the data through the private data members.
The encapsulate class is 
easy to test
. So, it is better for unit testing.
The standard IDE's are providing the facility to generate the getters and setters. So, it is 
easy and fast to create an encapsulated class
 in Java.

(adsbygoogle = window.adsbygoogle || []).push({});

Simple Example of Encapsulation in Java
Let's see the simple example of encapsulation that has only one field with its setter and getter methods.
File: Student.java

//A Java class which is a fully encapsulated class.
//It has a private data member and getter and setter methods.
package com.javatpoint;
public class Student{
//private data member
private String name;
//getter method for name
public String getName(){
return name;
}
//setter method for name
public void setName(String name){
this.name=name
}
}

File: Test.java

//A Java class to test the encapsulated class.
package com.javatpoint;
class Test{
public static void main(String[] args){
//creating instance of the encapsulated class
Student s=new Student();
//setting value in the name member
s.setName("vijay");
//getting value of the name member
System.out.println(s.getName());
}
}


Compile By: javac -d . Test.java
Run By: java com.javatpoint.Test

Output:

vijay

Read-Only class

//A Java class which has only getter methods.
public class Student{
//private data member
private String college="AKG";
//getter method for college
public String getCollege(){
return college;
}
}

Now, you can't change the value of the college data member which is "AKG". 

s.setCollege("KITE");//will render compile time error

Write-Only class

//A Java class which has only setter methods.
public class Student{
//private data member
private String college;
//getter method for college
public void setCollege(String college){
this.college=college;
}
}

Now, you can't get the value of the college, you can only change the value of college data member. 

System.out.println(s.getCollege());//Compile Time Error, because there is no such method
System.out.println(s.college);//Compile Time Error, because the college data member is private. 
//So, it can't be accessed from outside the class

Another Example of Encapsulation in Java
Let's see another example of encapsulation that has only four fields with its setter and getter methods.
File: Account.java

//A Account class which is a fully encapsulated class.
//It has a private data member and getter and setter methods.
class Account {
//private data members
private long acc_no;
private String name,email;
private float amount;
//public getter and setter methods
public long getAcc_no() {
	return acc_no;
}
public void setAcc_no(long acc_no) {
	this.acc_no = acc_no;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getEmail() {
	return email;
}
public void setEmail(String email) {
	this.email = email;
}
public float getAmount() {
	return amount;
}
public void setAmount(float amount) {
	this.amount = amount;
}

}

File: TestAccount.java

//A Java class to test the encapsulated class Account.
public class TestEncapsulation {
public static void main(String[] args) {
    //creating instance of Account class
	Account acc=new Account();
	//setting values through setter methods
	acc.setAcc_no(7560504000L);
	acc.setName("Sonoo Jaiswal");
	acc.setEmail("sonoojaiswal@javatpoint.com");
	acc.setAmount(500000f);
	//getting values through getter methods
	System.out.println(acc.getAcc_no()+" "+acc.getName()+" "+acc.getEmail()+" "+acc.getAmount());
}
}

Test it Now
Output:

7560504000 Sonoo Jaiswal sonoojaiswal@javatpoint.com 500000.0
