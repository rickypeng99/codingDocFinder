
4.4. break and continue Statements, and else Clauses on LoopsÂ¶
The break statement, like in C, breaks out of the innermost enclosing
for or while loop.
Loop statements may have an else clause; it is executed when the loop
terminates through exhaustion of the list (with for) or when the
condition becomes false (with while), but not when the loop is
terminated by a break statement.  This is exemplified by the
following loop, which searches for prime numbers:
>>> for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print(n, 'equals', x, '*', n//x)
...             break
...     else:
...         # loop fell through without finding a factor
...         print(n, 'is a prime number')
...
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3


(Yes, this is the correct code.  Look closely: the else clause belongs to
the for loop, not the if statement.)
When used with a loop, the else clause has more in common with the
else clause of a try statement than it does that of
if statements: a try statementâs else clause runs
when no exception occurs, and a loopâs else clause runs when no break
occurs. For more on the try statement and exceptions, see
Handling Exceptions.
The continue statement, also borrowed from C, continues with the next
iteration of the loop:
>>> for num in range(2, 10):
...     if num % 2 == 0:
...         print("Found an even number", num)
...         continue
...     print("Found a number", num)
Found an even number 2
Found a number 3
Found an even number 4
Found a number 5
Found an even number 6
Found a number 7
Found an even number 8
Found a number 9


