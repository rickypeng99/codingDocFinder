
16.1.1. Error HandlingÂ¶
When an error occurs, the interpreter prints an error message and a stack trace.
In interactive mode, it then returns to the primary prompt; when input came from
a file, it exits with a nonzero exit status after printing the stack trace.
(Exceptions handled by an except clause in a try statement
are not errors in this context.)  Some errors are unconditionally fatal and
cause an exit with a nonzero exit; this applies to internal inconsistencies and
some cases of running out of memory.  All error messages are written to the
standard error stream; normal output from executed commands is written to
standard output.
Typing the interrupt character (usually Control-C or Delete) to the primary or
secondary prompt cancels the input and returns to the primary prompt. [1]
Typing an interrupt while a command is executing raises the
KeyboardInterrupt exception, which may be handled by a try
statement.
